{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from \"@redux-saga/core/effects\";\nexport default function* cartSaga() {\n  function addCartAPI(data) {\n    return axios.post('/api/addCart', data); // -> 실제 서버에 요청을 보냄\n  }\n\n  function* addCartAction() {\n    try {\n      //yield call해서 로그인 api를 실행함\n      //const result =  yield call(addCartAPI, action.data);\n      // yield delay(1000);\n      yield put({\n        type: 'ADD_CART_SUCCEESS',\n        data: action.data\n      });\n    } catch (err) {\n      yield put({\n        type: 'ADD_CART_FAILURE',\n        data: err\n      });\n    }\n  }\n\n  function* removeCartAction(action) {\n    try {\n      //yield call해서 로그인 api를 실행함\n      //const result =  yield call(addCartAPI, action.data);\n      // yield delay(1000);\n      yield put({\n        type: 'REMOVE_CART_SUCCEESS',\n        data: action.data\n      });\n    } catch (err) {\n      yield put({\n        type: 'REMOVE_CART_FAILURE',\n        data: err.response.data\n      });\n    }\n  }\n\n  function* removeAllCartAction() {\n    try {\n      //yield call해서 로그인 api를 실행함\n      //const result =  yield call(addCartAPI, action.data);\n      // yield delay(1000);\n      yield put({\n        type: 'REMOVE_ALL_CART_SUCCEESS'\n      });\n    } catch (err) {\n      yield put({\n        type: 'REMOVE_ALL_CART_FAILURE',\n        data: err.response.data\n      });\n    }\n  }\n\n  function* watchAddCart() {\n    yield takeLatest('ADD_CART_REQUEST', addCartAction);\n  }\n\n  function* watchRemoveCart() {\n    yield takeLatest('REMOVE_CART_REQUEST', removeCartAction);\n  }\n\n  function* watchRemoveAllCart() {\n    yield takeLatest('REMOVE_ALL_CART_REQUEST', removeAllCartAction);\n  }\n\n  yield all([fork(watchAddCart), fork(watchRemoveCart), fork(watchRemoveAllCart)]);\n}","map":{"version":3,"sources":["C:/Users/ian07/Desktop/fake-shop/front/sagas/cart.js"],"names":["all","fork","takeLatest","delay","put","cartSaga","addCartAPI","data","axios","post","addCartAction","type","action","err","removeCartAction","response","removeAllCartAction","watchAddCart","watchRemoveCart","watchRemoveAllCart"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAiD,0BAAjD;AACA,eAAe,UAAUC,QAAV,GAAoB;AAG3B,WAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,WAAOC,KAAK,CAACC,IAAN,CAAW,cAAX,EAA2BF,IAA3B,CAAP,CADqB,CAErB;AAEH;;AAED,YAAUG,aAAV,GAAyB;AACrB,QAAG;AACC;AACA;AACA;AACA,YAAMN,GAAG,CAAC;AACNO,QAAAA,IAAI,EAAE,mBADA;AAENJ,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,OAAD,CAAT;AAIH,KARD,CAQC,OAAMM,GAAN,EAAU;AACP,YAAMT,GAAG,CAAC;AACNO,QAAAA,IAAI,EAAE,kBADA;AAENJ,QAAAA,IAAI,EAACM;AAFC,OAAD,CAAT;AAIH;AACJ;;AACD,YAAUC,gBAAV,CAA2BF,MAA3B,EAAkC;AAC9B,QAAG;AACC;AACA;AACA;AACA,YAAMR,GAAG,CAAC;AACNO,QAAAA,IAAI,EAAE,sBADA;AAENJ,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,OAAD,CAAT;AAIH,KARD,CAQC,OAAMM,GAAN,EAAU;AACP,YAAMT,GAAG,CAAC;AACNO,QAAAA,IAAI,EAAE,qBADA;AAENJ,QAAAA,IAAI,EAACM,GAAG,CAACE,QAAJ,CAAaR;AAFZ,OAAD,CAAT;AAIH;AACJ;;AAGD,YAAUS,mBAAV,GAA+B;AAC3B,QAAG;AACC;AACA;AACA;AAEA,YAAMZ,GAAG,CAAC;AACNO,QAAAA,IAAI,EAAE;AADA,OAAD,CAAT;AAGH,KARD,CAQC,OAAME,GAAN,EAAU;AACP,YAAMT,GAAG,CAAC;AACNO,QAAAA,IAAI,EAAE,yBADA;AAENJ,QAAAA,IAAI,EAACM,GAAG,CAACE,QAAJ,CAAaR;AAFZ,OAAD,CAAT;AAIH;AACJ;;AAIL,YAAUU,YAAV,GAAwB;AACpB,UAAMf,UAAU,CAAC,kBAAD,EAAqBQ,aAArB,CAAhB;AACH;;AAED,YAAUQ,eAAV,GAA2B;AACvB,UAAMhB,UAAU,CAAC,qBAAD,EAAwBY,gBAAxB,CAAhB;AACH;;AAED,YAAUK,kBAAV,GAA8B;AAC1B,UAAMjB,UAAU,CAAC,yBAAD,EAA4Bc,mBAA5B,CAAhB;AACH;;AAED,QAAMhB,GAAG,CAAC,CACNC,IAAI,CAACgB,YAAD,CADE,EAENhB,IAAI,CAACiB,eAAD,CAFE,EAGNjB,IAAI,CAACkB,kBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, delay, put} from \"@redux-saga/core/effects\";\r\nexport default function* cartSaga(){\r\n    \r\n\r\n        function addCartAPI(data){\r\n            return axios.post('/api/addCart', data)\r\n            // -> 실제 서버에 요청을 보냄\r\n\r\n        }\r\n\r\n        function* addCartAction(){\r\n            try{\r\n                //yield call해서 로그인 api를 실행함\r\n                //const result =  yield call(addCartAPI, action.data);\r\n                // yield delay(1000);\r\n                yield put({\r\n                    type: 'ADD_CART_SUCCEESS',\r\n                    data: action.data\r\n                });\r\n            }catch(err){\r\n                yield put({\r\n                    type: 'ADD_CART_FAILURE',\r\n                    data:err,\r\n                });\r\n            }\r\n        }\r\n        function* removeCartAction(action){\r\n            try{\r\n                //yield call해서 로그인 api를 실행함\r\n                //const result =  yield call(addCartAPI, action.data);\r\n                // yield delay(1000);\r\n                yield put({\r\n                    type: 'REMOVE_CART_SUCCEESS',\r\n                    data: action.data\r\n                });\r\n            }catch(err){\r\n                yield put({\r\n                    type: 'REMOVE_CART_FAILURE',\r\n                    data:err.response.data,\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        function* removeAllCartAction(){\r\n            try{\r\n                //yield call해서 로그인 api를 실행함\r\n                //const result =  yield call(addCartAPI, action.data);\r\n                // yield delay(1000);\r\n\r\n                yield put({\r\n                    type: 'REMOVE_ALL_CART_SUCCEESS',\r\n                });\r\n            }catch(err){\r\n                yield put({\r\n                    type: 'REMOVE_ALL_CART_FAILURE',\r\n                    data:err.response.data,\r\n                });\r\n            }\r\n        }\r\n\r\n        \r\n\r\n    function* watchAddCart(){\r\n        yield takeLatest('ADD_CART_REQUEST', addCartAction);\r\n    }\r\n\r\n    function* watchRemoveCart(){\r\n        yield takeLatest('REMOVE_CART_REQUEST', removeCartAction);\r\n    }\r\n\r\n    function* watchRemoveAllCart(){\r\n        yield takeLatest('REMOVE_ALL_CART_REQUEST', removeAllCartAction);\r\n    }\r\n\r\n    yield all([\r\n        fork(watchAddCart),\r\n        fork(watchRemoveCart),\r\n        fork(watchRemoveAllCart),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}